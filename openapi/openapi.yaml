openapi: 3.0.0
info:
  title: Queensaver API
  version: 0.0.1
  description: Queensaver API to send in sensor data and retrieve it. It's also used for user management.

servers:
- url: https://api.queensaver.com/v1
  description: Queensaver API Server

security:
- cookieAuth: []

paths: 

  /user:
    post:
      summary: Create a user 
      description: This call creates a user in the queensaver system.
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: "OK"
        "400":
          description: The provided parameters are incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
              examples:
                missingData:
                  value: "Data is missing."

  /login:
    post:
      summary: Authenticate a user against the system.
      description: This call is meant for interactive web applications. Be aware that the server returns a cookie with a 24 hour lifetime. 
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        "200":
          description: "Returns a cookie to the browser with the key called 'token'"
          headers:
            "Set-Cookie":
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly

        "400":
          description: The provided parameters are incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"


  /hives:
    get:
      summary: Get Hive metadata
      description: This returns all hive metadata for the currently logged in user.
      security:
      - cookieAuth: []
      parameters:
      - name: uuid
        in: query
        description: The UUID of the hive. If not set, the request will return all hives.
        required: false
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      - name: bhiveId
        in: query
        description: The Unique ID (Mac Address) of the QBox client. If set, the query will only return the Hive that sits on the QBox client (or nothing if there is no hive associated).
        required: false
        example: 829898a53801
        schema:
          type: string
      responses:
        "200":
          description: "Hives"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/hive"
        "400":
          description: Client error
        "500":
          description: Internal error

    put:
      summary: Update Hive metadata
      description: This updates new hive.
      security:
      - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hive"
      responses:
        "200":
          description: "Returns the updated hive"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/hive"
        "400":
          description: Client error
        "500":
          description: Internal error


    post:
      summary: Create Hive metadata
      description: This creates a new hive. A hive is a logical representation of a bee hive that can be connected to hardware.
      security:
      - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hive"
      responses:
        "200":
          description: "Returns the created hive"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/hive"
        "400":
          description: Client error
        "500":
          description: Internal error


    delete:
      summary: Delete a Hive
      description: This deletes a hive.
      security:
      - cookieAuth: []
      parameters:
      - name: uuid
        in: query
        description: The UUID of the hive.
        required: true
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      responses:
        "200":
          description: "Returns 200 if the delete was successful"
        "400":
          description: Client error
        "500":
          description: Internal error




  /bboxes:
    get:
      summary: Get QBox metadata
      description: This returns QBox metadata for the logged in user. The request needs to present a valid session cookie. There are no query parameters needed here, the request will return all known bboxes.
      security:
      - cookieAuth: []
      responses:
        "200":
          description: "QBox metadata"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bbox"

        "400":
          description: Client error
        "500":
          description: Internal error

  /temperature:
    get:
      summary: Get Temperature values 
      description: This returns temperate values for a certain, defineable date range. The request needs to send a cookie along with the request. The cookie is stored under the key called "token". Note that this returns the temperature data for a QBox Client (independent of the beeHive), the API call for an actual beeHive is different.
      security:
      - cookieAuth: []

      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: bhiveId
        in: query
        description: The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
        example: 1639170002
        required: true
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to get the data measurements. 
        required: true
        example: 7200
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "Successfully returned a list of scale measurements"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/getTemperature"

        "400":
          description: Client error
        "500":
          description: Internal error

    post:
      summary: Save a new temperature measurement
      description: This stores a new temperature measurement in the database. Must be authorized wit ha cookie or a token.
      security:
      - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newTemperature"
      responses:
        "200":
          description: "OK"
        "400":
          description: Client error
        "500":
          description: Internal error

  /scale:
    get:
      summary: Get Scale values 
      description: This returns scale values for a certain, defineable date range. The request needs to send a cookie along with the request. The cookie is stored under the key called "token". Note that this returns the scale data for a QBox Client (independent of the beeHive), the API call for an actual beeHive is different.
      # operationId: getScaleValues
      security:
      - cookieAuth: []

      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: bhiveId
        in: query
        description: The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
        example: 1639170002
        required: true
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to get the data measurements. 
        required: true
        example: 7200
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "Successfully returned a list of scale measurements"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/weight"

        "400":
          description: Client error
        "500":
          description: Internal error

  /varroa-scan:
    get:
      summary: Get Varroa Scan images and metadata
      description: This returns varroa scan metadata. You can search for varroa scans for a certain, defineable date range. The request needs to send a cookie along with the request. The cookie is stored under the key called "token". Note that this returns the image for a QBox Client (independent of the beeHive), the API call for an actual beeHive is different.
      security:
      - cookieAuth: []

      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: bhiveId
        in: query
        description: The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the varroa images. The beginning is defined by the secondsInThePast parameter.
        example: 1639170002
        required: false
        schema:
          type: integer
          format: int64
      - name: uuid
        in: query
        description: The UUID of the varra-scan. If not set, the request will return scans in the given time range. If this parameter is given we ignore all time ranges.
        required: false
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string

      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to get the data measurements. 
        required: false 
        example: 7200
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "Successfully returns a list of varroa scans"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/varroa-scan"

        "400":
          description: Client error
        "500":
          description: Internal error

components:

  securitySchemes:
    cookieAuth:  # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: token # cookie name

#  parameters:
#    rowParam:
#      description: Board row (vertical coordinate)
#      name: row
#      in: path
#      required: true
#      schema:
#        $ref: "#/components/schemas/coordinate"
#    columnParam:
#      description: Board column (horizontal coordinate)
#      name: column
#      in: path
#      required: true
#      schema:
#        $ref: "#/components/schemas/coordinate"
  schemas:
    errorMessage:
      type: string
      maxLength: 256
      description: A text message describing an error
#    board:
#      type: array
#      maxItems: 3
#      minItems: 3
#      items:
#        type: array
#        maxItems: 3
#        minItems: 3
#        items:
#          $ref: "#/components/schemas/mark"
    id:
      type: integer
      minimum: 1
      example: 15
      description: ID of the object. The ID is usually determined by the DBMS.

    varroa-scan-metadata:
      type: object
      properties:
        # TODO: more work needed here.
        class:
          type: string
          description: class
          example: "wing"
          x-protobuf-index: 1

    varroa-scan:
      type: object
      properties:
        bhiveId:
          type: string
          description: bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
          example: "829898a53801"
          x-protobuf-index: 1
        imageUrl:
          type: string
          description: URL to the image of the varroa scan
          example: https://api.queensaver.com/images/1234.jpg
          x-protobuf-index: 2
        epoch:
          type: integer
          format: int64
          description: timestamp of the measurement on one second precision
          example: 1639169129
          x-protobuf-index: 3
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/varroa-scan-metadata"
          x-protobuf-index: 4
          
    getTemperature:
      type: object
      properties:
        userId:
          type: number
          format: int64
          description: the internal user id of the authenticated user. Will be set internally in the cloud system and does not have an effect if set via the API call as it will be overridden. Don't set this value.
          example: 4
          x-protobuf-index: 1
        temperatures:
          type: array
          items:
            $ref: "#/components/schemas/temperature"
          x-protobuf-index: 2
        error:
          type: string
          description: error
          x-protobuf-index: 3
        httpReponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 4
            
    newTemperature:
      type: object
      properties:
        userId:
          type: number
          format: int64
          description: the internal user id of the authenticated user. Will be set internally in the cloud system and does not have an effect if set via the API call as it will be overridden. Don't set this value.
          example: 4
          x-protobuf-index: 1
        temperature:
          description: the temperature object
          $ref: "#/components/schemas/temperature"
          x-protobuf-index: 2
 
    temperature:
      type: object
      properties:
        bhiveId:
          type: string
          description: bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
          example: "829898a53801"
          x-protobuf-index: 1
        temperature:
          type: number
          format: float
          description: actual measurement of the temperature
          example: 13.2345
          x-protobuf-index: 2
        epoch:
          type: integer
          format: int64
          description: timestamp of the measurement on one second precision
          example: 1639169129
          x-protobuf-index: 3
        error:
          type: string
          description: error that the client received when creating a measurement
          example: "Sensor error"
          x-protobuf-index: 4
      required:
      - bhiveId
      - temperature
      - epoch

    weight:
      type: object
      properties:
        bhiveId:
          type: string
          description: bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
          example: "829898a53801"
        weight:
          type: number
          format: float
          description: actual measurement of weight
          example: 53.2345
        epoch:
          type: integer
          format: int64
          description: timestamp of the measurement on one second precision
          example: 1639169129

    login:
      type: object
      properties:
        username:
          type: string
          maxLength: 256
          description: Username, must be unique to the queensaver system. We encourage using email-addresses here.
          example: jon@doe.com
        password:
          type: string
          format: password
          description: Password
          example: trustno1
      required:
      - username
      - password

    bhive:
      type: object
      properties:
        bhiveId:
          type: string
          maxLength: 256
          description: The ID of a beehive. Is unique for that user.
          example: "829898a53801"

    hive:
      type: object
      properties:
        name:
          type: string
          example: "B25"
          description: Name of the hive. Can be chosen by the user.
          x-protobuf-index: 1
        public:
          type: boolean
          description: If the hive can be viewed by other users in the queensaver system
          example: true
          x-protobuf-index: 2
        uuid:
          type: string
          example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
          description: Unique Identifier for this hive
          x-protobuf-index: 7
        comment:
          type: string
          example: "This hive needs to be replaced next year"
          description: Random note or user comment
          x-protobuf-index: 3
        capacity:
          type: integer
          minimum: 1
          maximum: 50
          example: 10
          description: How many honeycombs a frame can load
          x-protobuf-index: 4
        format:
          type: string
          enum:
          - Zander
          - Dadant
          description: The format of the frame
          example: "Dadant"
          x-protobuf-index: 5
        frames:
          type: integer
          x-protobuf-index: 6
          description: The number of frames the bee hive has
          example: 3
#          items:
#            type: object
#            properties:
#              function:
#                type: string
#                enum:
#                - Breed
#                - Honey
#                - Unspecified 
#                description: The format of the frame
#                example: "Dadant"
#                x-protobuf-index: 7
        bhiveId:
          type: string
          maxLength: 256
          description: The ID of beehive electronics (QBox client).
          example: "829898a53801"
          x-protobuf-index: 8
        httpReponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be let out at the API level.
          x-protobuf-index: 9
 
    bbox:
      type: object
      properties:
        bboxId:
          type: integer
          minimum: 1
          example: 15
          description: ID of the object. The ID is usually determined by the DBMS.
        schedule:
          type: string
          maxLength: 256
          description: A cron type of description of when the sensore measurements are supposed to be done.
          example: "03 6,12,16,20 * * *"
        bhive:
          type: array
          items:
            #$ref: "#/components/schemas/bhive" # TODO: unsure why this doesn't work
            type: object
            properties:
              bhiveId:
                type: string
                maxLength: 256
                description: The ID of a beehive. Is unique for that user.
                example: "829898a53801"


    user:
      type: object
      properties:
        username:
          type: string
          maxLength: 256
          description: Username, must be unique to the queensaver system. We encourage using email-addresses here.
          example: jon@doe.com
        password:
          type: string
          format: password
          description: Password
        firstName:
          type: string
          maxLength: 256
          description: First name of the user
          example: Hans
        lastName:
          type: string
          maxLength: 256
          description: Last name of the user
          example: Ecker
      required:
      - username
      - password
      - firstName
      - lastName
