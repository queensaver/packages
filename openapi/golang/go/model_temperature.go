/*
 * Queensaver API
 *
 * Queensaver API to send in sensor data and retrieve it. It's also used for user management.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Temperature struct {

	// bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
	BhiveId string `json:"bhiveId"`

	// actual measurement of the temperature
	Temperature float32 `json:"temperature"`

	// timestamp of the measurement on one second precision
	Epoch int64 `json:"epoch"`

	// error that the client received when creating a measurement
	Error string `json:"error,omitempty"`
}

// AssertTemperatureRequired checks if the required fields are not zero-ed
func AssertTemperatureRequired(obj Temperature) error {
	elements := map[string]interface{}{
		"bhiveId": obj.BhiveId,
		"temperature": obj.Temperature,
		"epoch": obj.Epoch,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTemperatureRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Temperature (e.g. [][]Temperature), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTemperatureRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTemperature, ok := obj.(Temperature)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTemperatureRequired(aTemperature)
	})
}
