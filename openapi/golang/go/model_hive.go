/*
 * Queensaver API
 *
 * Queensaver API to send in sensor data and retrieve it. It's also used for user management.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Hive struct {

	// Name of the hive. Can be chosen by the user.
	Name string `json:"name,omitempty"`

	// If the hive can be viewed by other users in the queensaver system
	Public bool `json:"public,omitempty"`

	// Unique Identifier for this hive
	Uuid string `json:"uuid,omitempty"`

	// Random note or user comment
	Comment string `json:"comment,omitempty"`

	// How many honeycombs a frame can load
	Capacity int32 `json:"capacity,omitempty"`

	// The format of the frame
	Format string `json:"format,omitempty"`

	Frame []HiveFrame `json:"frame,omitempty"`
}

// AssertHiveRequired checks if the required fields are not zero-ed
func AssertHiveRequired(obj Hive) error {
	for _, el := range obj.Frame {
		if err := AssertHiveFrameRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseHiveRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Hive (e.g. [][]Hive), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseHiveRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aHive, ok := obj.(Hive)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertHiveRequired(aHive)
	})
}
